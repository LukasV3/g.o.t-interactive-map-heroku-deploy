{"version":3,"sources":["services/api.js","components/map/Map.js","components/infoPanel/InfoPanel.js","services/search.js","components/searchBar/SearchBar.js","App.js","index.js"],"names":["axios","create","baseURL","withCredentials","headers","Access-Control-Allow-Origin","Access-Control-Allow-Methods","Map","this","renderMap","kingdoms","get","res","addKingdomGeojson","data","toggleLayer","props","searchResult","name","selectLocation","id","layerName","selectedSublayer","layers","getLayers","find","layer","feature","geometry","properties","map","flyToBounds","getBounds","fireEvent","L","center","zoom","maxZoom","minZoom","maxBounds","zoomControl","setPosition","tileLayer","crs","CRS","EPSG4326","addTo","geojson","kingdom","geoJSON","style","color","weight","opacity","onEachFeature","onEachKingdom","bind","_this","on","click","e","_feature$properties","setHighlightedRegion","onKingdomClick","selected","resetStyle","bringToFront","setStyle","hasLayer","removeLayer","addLayer","react_default","a","createElement","className","React","Component","InfoPanel","ref","onClick","refs","container","classList","toggle","summary","services_search","Search","Object","classCallCheck","options","keys","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","searchbase","fuse","Fuse","concat","item","term","search","SearchBar","state","onInputChange","setState","target","value","onSearch","_this2","clearTimeout","searchDebounce","setTimeout","_this3","results","innerHTML","searchResults","slice","forEach","result","displaySearchResult","_this4","layerItem","document","textContent","addEventListener","searchResultSelected","appendChild","onSearchClick","type","placeholder","onChange","App","showInfo","_callee","regenerator_default","wrap","_context","prev","next","sent","stop","updateSearchResult","kingdomsGeojson","addGeoJsonItems","map_Map","infoPanel_InfoPanel","searchBar_SearchBar","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.d17c3b72.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://game-of-thrones-interactive.herokuapp.com/api/v1/kingdoms\",\n  withCredentials: false,\n  headers: {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Methods\": \"GET,PUT,POST,DELETE,PATCH,OPTIONS\",\n  },\n});\n","import React from \"react\";\nimport \"./styles.scss\";\nimport L from \"leaflet\";\n\nimport kingdoms from \"../../services/api\";\n\nclass Map extends React.Component {\n  async componentDidMount() {\n    this.renderMap();\n\n    const res = await kingdoms.get(\"/\");\n    this.addKingdomGeojson(res.data);\n    this.toggleLayer(\"kingdom\");\n  }\n\n  componentDidUpdate() {\n    // only runs if there is a searchterm\n    if (!this.props.searchResult.name) return;\n    this.selectLocation(this.props.searchResult.id, this.props.searchResult.layerName);\n  }\n\n  /** Trigger \"click\" on layer with provided name */\n  selectLocation(id, layerName) {\n    // Find selected layer\n    const geojsonLayer = this.layers[layerName];\n    const sublayers = geojsonLayer.getLayers();\n    const selectedSublayer = sublayers.find((layer) => {\n      return layer.feature.geometry.properties.id === id;\n    });\n\n    // Zoom map to selected layer\n    this.map.flyToBounds(selectedSublayer.getBounds(), 5);\n\n    // Fire click event\n    selectedSublayer.fireEvent(\"click\");\n  }\n\n  renderMap() {\n    this.map = L.map(\"mapid\", {\n      center: [5, 20],\n      zoom: 4,\n      maxZoom: 8,\n      minZoom: 4,\n      maxBounds: [\n        [50, -30],\n        [-45, 100],\n      ],\n    });\n\n    this.map.zoomControl.setPosition(\"bottomright\"); // Position zoom control\n    this.layers = {}; // Map layer dict (key/value = title/layer)\n\n    // Render Carto GoT tile baselayer\n    L.tileLayer(\n      \"https://cartocdn-gusc.global.ssl.fastly.net/ramirocartodb/api/v1/map/named/tpl_756aec63_3adb_48b6_9d14_331c6cbc47cf/all/{z}/{x}/{y}.png\",\n      { crs: L.CRS.EPSG4326 }\n    ).addTo(this.map);\n  }\n\n  addKingdomGeojson(geojson) {\n    // Initialize new geojson layer\n    this.layers.kingdom = L.geoJSON(geojson, {\n      // Set layer style\n      style: {\n        color: \"#222\",\n        weight: 1,\n        opacity: 0.65,\n      },\n      onEachFeature: this.onEachKingdom.bind(this),\n    });\n  }\n\n  /** Assign click listener for each kingdom GeoJSON item  */\n  onEachKingdom(feature, layer) {\n    layer.on({\n      click: (e) => {\n        const { name, id } = feature.properties;\n        this.setHighlightedRegion(layer); // Highlight kingdom polygon\n        this.props.onKingdomClick(name, id); // Show kingdom info in InfoPanel\n      },\n    });\n  }\n\n  setHighlightedRegion(layer) {\n    // If a layer is currently selected, deselect it\n    if (this.selected) {\n      this.layers.kingdom.resetStyle(this.selected);\n    }\n\n    // Select the provided region layer\n    this.selected = layer;\n    if (this.selected) {\n      this.selected.bringToFront();\n      this.selected.setStyle({ color: \"blue\" });\n    }\n  }\n\n  /** Toggle map layer visibility */\n  toggleLayer(layerName) {\n    const layer = this.layers[layerName];\n    if (this.map.hasLayer(layer)) {\n      this.map.removeLayer(layer);\n    } else {\n      this.map.addLayer(layer);\n    }\n  }\n\n  render() {\n    return <div id=\"mapid\" className=\"map-container\"></div>;\n  }\n}\n\nexport default Map;\n","import React from \"react\";\nimport \"./styles.scss\";\n\nclass InfoPanel extends React.Component {\n  render() {\n    return (\n      <div ref=\"container\" className=\"info-container\">\n        <div\n          ref=\"title\"\n          onClick={() => this.refs.container.classList.toggle(\"info-active\")}\n          className=\"info-title\"\n        >\n          <h1>{this.props.name || \"Nothing Selected\"}</h1>\n        </div>\n        <div className=\"info-body\">\n          <div className=\"info-content-container\">\n            <div ref=\"content\" className=\"info-content\">\n              {this.props.summary || \"\"}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default InfoPanel;\n","import Fuse from \"fuse.js\";\n\nclass Search {\n  constructor() {\n    this.options = {\n      keys: [\"name\"],\n      shouldSort: true,\n      threshold: 0.3,\n      location: 0,\n      distance: 100,\n      maxPatternLength: 32,\n      minMatchCharLength: 1,\n    };\n\n    this.searchbase = [];\n    this.fuse = new Fuse([], this.options);\n  }\n\n  addGeoJsonItems(geojson, layerName) {\n    this.searchbase = this.searchbase.concat(\n      geojson.map((item) => {\n        return { layerName, name: item.properties.name, id: item.properties.id };\n      })\n    );\n\n    this.fuse = new Fuse(this.searchbase, this.options);\n  }\n\n  search(term) {\n    return this.fuse.search(term);\n  }\n}\n\nexport default new Search();\n","import React from \"react\";\nimport \"./styles.scss\";\n\nimport Search from \"../../services/search\";\n\nclass SearchBar extends React.Component {\n  state = {\n    term: \"\",\n  };\n\n  onInputChange = (e) => {\n    this.setState({ term: e.target.value });\n    this.onSearch();\n  };\n\n  onSearch() {\n    clearTimeout(this.searchDebounce);\n    this.searchDebounce = setTimeout(() => this.search(this.state.term), 500);\n  }\n\n  search(term) {\n    // Clear search results\n    this.refs.results.innerHTML = \"\";\n\n    // Get the top ten search results\n    this.searchResults = Search.search(term).slice(0, 10);\n\n    // Display search results on UI\n    this.searchResults.forEach((result) => this.displaySearchResult(result));\n  }\n\n  /** Add search result row to UI */\n  displaySearchResult(searchResult) {\n    let layerItem = document.createElement(\"div\");\n    layerItem.textContent = searchResult.item.name;\n    layerItem.addEventListener(\"click\", () => this.searchResultSelected(searchResult));\n    this.refs.results.appendChild(layerItem);\n  }\n\n  /** Display the selected search result  */\n  searchResultSelected(searchResult) {\n    // Clear search input and results\n    this.setState({ term: \"\" });\n    this.refs.results.innerHTML = \"\";\n\n    this.props.onSearchClick(searchResult);\n  }\n\n  render() {\n    return (\n      <div className=\"search-container\">\n        <div className=\"search-bar\">\n          <input\n            ref=\"input\"\n            type=\"text\"\n            name=\"search\"\n            placeholder=\"Search...\"\n            value={this.state.term}\n            className=\"search-input\"\n            onChange={this.onInputChange}\n          ></input>\n        </div>\n        <div ref=\"results\" className=\"search-results\"></div>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from \"react\";\nimport \"./styles/index.scss\";\nimport Map from \"./components/map/Map\";\nimport InfoPanel from \"./components/infoPanel/InfoPanel\";\nimport SearchBar from \"./components/searchBar/SearchBar\";\n\nimport Search from \"./services/search\";\nimport kingdoms from \"./services/api\";\n\nclass App extends React.Component {\n  state = {\n    selected: {},\n    searchResult: {},\n  };\n\n  async componentDidMount() {\n    // Download kingdom boundaries\n    const res = await kingdoms.get(\"/\");\n    const kingdomsGeojson = res.data;\n\n    // Add boundary data to search service\n    Search.addGeoJsonItems(kingdomsGeojson, \"kingdom\");\n  }\n\n  showInfo = async (name, id) => {\n    // Download and display kingdom information\n    const res = await kingdoms.get(`/${id}/summary`);\n    const { summary } = res.data;\n    this.setState({ selected: { name, summary }, searchResult: {} });\n  };\n\n  updateSearchResult = (searchResult) => {\n    this.setState({ searchResult: searchResult.item });\n  };\n\n  render() {\n    return (\n      <div>\n        <Map onKingdomClick={this.showInfo} searchResult={this.state.searchResult} />\n        <InfoPanel\n          name={this.state.selected.name}\n          summary={this.state.selected.summary}\n        />\n        <SearchBar onSearchClick={this.updateSearchResult} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}