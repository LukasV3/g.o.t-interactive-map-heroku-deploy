{"version":3,"sources":["services/api.js","components/map/Map.js","components/infoPanel/InfoPanel.js","services/search.js","components/searchBar/SearchBar.js","App.js","index.js"],"names":["getKingdomInfo","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","id","res","wrap","_context","prev","next","get","concat","sent","abrupt","data","stop","_x","apply","this","arguments","getKingdoms","_ref2","_callee2","_context2","Map","renderMap","addKingdomGeojson","toggleLayer","props","searchResult","name","selectLocation","layerName","selectedSublayer","layers","getLayers","find","layer","feature","geometry","properties","map","flyToBounds","getBounds","fireEvent","L","center","zoom","maxZoom","minZoom","maxBounds","zoomControl","setPosition","tileLayer","crs","CRS","EPSG4326","addTo","geojson","kingdom","geoJSON","style","color","weight","opacity","onEachFeature","onEachKingdom","bind","_this","on","click","e","_feature$properties","setHighlightedRegion","onKingdomClick","selected","resetStyle","bringToFront","setStyle","hasLayer","removeLayer","addLayer","react_default","createElement","className","React","Component","InfoPanel","ref","onClick","refs","container","classList","toggle","summary","services_search","Search","classCallCheck","options","keys","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","searchbase","fuse","Fuse","item","term","search","SearchBar","state","onInputChange","setState","target","value","onSearch","_this2","clearTimeout","searchDebounce","setTimeout","_this3","results","innerHTML","searchResults","slice","forEach","result","displaySearchResult","_this4","layerItem","document","textContent","addEventListener","searchResultSelected","appendChild","onSearchClick","type","placeholder","onChange","App","showInfo","_yield$getKingdomInfo","updateSearchResult","kingdomsGeojson","addGeoJsonItems","map_Map","infoPanel_InfoPanel","searchBar_SearchBar","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.f44e0d63.chunk.js","sourcesContent":["import { get } from \"axios\";\n\nexport const getKingdomInfo = async (id) => {\n  const res = await get(`http://127.0.0.1:5000/api/v1/kingdoms/${id}/summary`);\n  return res.data;\n};\n\nexport const getKingdoms = async () => {\n  const res = await get(\"http://127.0.0.1:5000/api/v1/kingdoms\");\n  return res.data;\n};\n","import React from \"react\";\nimport \"./styles.scss\";\nimport L from \"leaflet\";\n\nimport { getKingdoms } from \"../../services/api\";\n\nclass Map extends React.Component {\n  async componentDidMount() {\n    this.renderMap();\n\n    this.addKingdomGeojson(await getKingdoms());\n    this.toggleLayer(\"kingdom\");\n  }\n\n  componentDidUpdate() {\n    // only runs if there is a searchterm\n    if (!this.props.searchResult.name) return;\n    this.selectLocation(this.props.searchResult.id, this.props.searchResult.layerName);\n  }\n\n  /** Trigger \"click\" on layer with provided name */\n  selectLocation(id, layerName) {\n    // Find selected layer\n    const geojsonLayer = this.layers[layerName];\n    const sublayers = geojsonLayer.getLayers();\n    const selectedSublayer = sublayers.find((layer) => {\n      return layer.feature.geometry.properties.id === id;\n    });\n\n    // Zoom map to selected layer\n    this.map.flyToBounds(selectedSublayer.getBounds(), 5);\n\n    // Fire click event\n    selectedSublayer.fireEvent(\"click\");\n  }\n\n  renderMap() {\n    this.map = L.map(\"mapid\", {\n      center: [5, 20],\n      zoom: 4,\n      maxZoom: 8,\n      minZoom: 4,\n      maxBounds: [\n        [50, -30],\n        [-45, 100],\n      ],\n    });\n\n    this.map.zoomControl.setPosition(\"bottomright\"); // Position zoom control\n    this.layers = {}; // Map layer dict (key/value = title/layer)\n\n    // Render Carto GoT tile baselayer\n    L.tileLayer(\n      \"https://cartocdn-gusc.global.ssl.fastly.net/ramirocartodb/api/v1/map/named/tpl_756aec63_3adb_48b6_9d14_331c6cbc47cf/all/{z}/{x}/{y}.png\",\n      { crs: L.CRS.EPSG4326 }\n    ).addTo(this.map);\n  }\n\n  addKingdomGeojson(geojson) {\n    // Initialize new geojson layer\n    this.layers.kingdom = L.geoJSON(geojson, {\n      // Set layer style\n      style: {\n        color: \"#222\",\n        weight: 1,\n        opacity: 0.65,\n      },\n      onEachFeature: this.onEachKingdom.bind(this),\n    });\n  }\n\n  /** Assign click listener for each kingdom GeoJSON item  */\n  onEachKingdom(feature, layer) {\n    layer.on({\n      click: (e) => {\n        const { name, id } = feature.properties;\n        this.setHighlightedRegion(layer); // Highlight kingdom polygon\n        this.props.onKingdomClick(name, id); // Show kingdom info in InfoPanel\n      },\n    });\n  }\n\n  setHighlightedRegion(layer) {\n    // If a layer is currently selected, deselect it\n    if (this.selected) {\n      this.layers.kingdom.resetStyle(this.selected);\n    }\n\n    // Select the provided region layer\n    this.selected = layer;\n    if (this.selected) {\n      this.selected.bringToFront();\n      this.selected.setStyle({ color: \"blue\" });\n    }\n  }\n\n  /** Toggle map layer visibility */\n  toggleLayer(layerName) {\n    const layer = this.layers[layerName];\n    if (this.map.hasLayer(layer)) {\n      this.map.removeLayer(layer);\n    } else {\n      this.map.addLayer(layer);\n    }\n  }\n\n  render() {\n    return <div id=\"mapid\" className=\"map-container\"></div>;\n  }\n}\n\nexport default Map;\n","import React from \"react\";\nimport \"./styles.scss\";\n\nclass InfoPanel extends React.Component {\n  render() {\n    return (\n      <div ref=\"container\" className=\"info-container\">\n        <div\n          ref=\"title\"\n          onClick={() => this.refs.container.classList.toggle(\"info-active\")}\n          className=\"info-title\"\n        >\n          <h1>{this.props.name || \"Nothing Selected\"}</h1>\n        </div>\n        <div className=\"info-body\">\n          <div className=\"info-content-container\">\n            <div ref=\"content\" className=\"info-content\">\n              {this.props.summary || \"\"}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default InfoPanel;\n","import Fuse from \"fuse.js\";\n\nclass Search {\n  constructor() {\n    this.options = {\n      keys: [\"name\"],\n      shouldSort: true,\n      threshold: 0.3,\n      location: 0,\n      distance: 100,\n      maxPatternLength: 32,\n      minMatchCharLength: 1,\n    };\n\n    this.searchbase = [];\n    this.fuse = new Fuse([], this.options);\n  }\n\n  addGeoJsonItems(geojson, layerName) {\n    this.searchbase = this.searchbase.concat(\n      geojson.map((item) => {\n        return { layerName, name: item.properties.name, id: item.properties.id };\n      })\n    );\n\n    this.fuse = new Fuse(this.searchbase, this.options);\n  }\n\n  search(term) {\n    return this.fuse.search(term);\n  }\n}\n\nexport default new Search();\n","import React from \"react\";\nimport \"./styles.scss\";\n\nimport Search from \"../../services/search\";\n\nclass SearchBar extends React.Component {\n  state = {\n    term: \"\",\n  };\n\n  onInputChange = (e) => {\n    this.setState({ term: e.target.value });\n    this.onSearch();\n  };\n\n  onSearch() {\n    clearTimeout(this.searchDebounce);\n    this.searchDebounce = setTimeout(() => this.search(this.state.term), 500);\n  }\n\n  search(term) {\n    // Clear search results\n    this.refs.results.innerHTML = \"\";\n\n    // Get the top ten search results\n    this.searchResults = Search.search(term).slice(0, 10);\n\n    // Display search results on UI\n    this.searchResults.forEach((result) => this.displaySearchResult(result));\n  }\n\n  /** Add search result row to UI */\n  displaySearchResult(searchResult) {\n    let layerItem = document.createElement(\"div\");\n    layerItem.textContent = searchResult.item.name;\n    layerItem.addEventListener(\"click\", () => this.searchResultSelected(searchResult));\n    this.refs.results.appendChild(layerItem);\n  }\n\n  /** Display the selected search result  */\n  searchResultSelected(searchResult) {\n    // Clear search input and results\n    this.setState({ term: \"\" });\n    this.refs.results.innerHTML = \"\";\n\n    this.props.onSearchClick(searchResult);\n  }\n\n  render() {\n    return (\n      <div className=\"search-container\">\n        <div className=\"search-bar\">\n          <input\n            ref=\"input\"\n            type=\"text\"\n            name=\"search\"\n            placeholder=\"Search...\"\n            value={this.state.term}\n            className=\"search-input\"\n            onChange={this.onInputChange}\n          ></input>\n        </div>\n        <div ref=\"results\" className=\"search-results\"></div>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from \"react\";\nimport \"./styles/index.scss\";\nimport Map from \"./components/map/Map\";\nimport InfoPanel from \"./components/infoPanel/InfoPanel\";\nimport SearchBar from \"./components/searchBar/SearchBar\";\n\nimport Search from \"./services/search\";\nimport { getKingdomInfo } from \"./services/api\";\nimport { getKingdoms } from \"./services/api\";\n\nclass App extends React.Component {\n  state = {\n    selected: {},\n    searchResult: {},\n  };\n\n  async componentDidMount() {\n    // Download kingdom boundaries\n    const kingdomsGeojson = await getKingdoms();\n\n    // Add boundary data to search service\n    Search.addGeoJsonItems(kingdomsGeojson, \"kingdom\");\n  }\n\n  showInfo = async (name, id) => {\n    // Download and display kingdom information\n    const { summary } = await getKingdomInfo(id);\n    this.setState({ selected: { name, summary }, searchResult: {} });\n  };\n\n  updateSearchResult = (searchResult) => {\n    this.setState({ searchResult: searchResult.item });\n  };\n\n  render() {\n    return (\n      <div>\n        <Map onKingdomClick={this.showInfo} searchResult={this.state.searchResult} />\n        <InfoPanel\n          name={this.state.selected.name}\n          summary={this.state.selected.summary}\n        />\n        <SearchBar onSearchClick={this.updateSearchResult} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}